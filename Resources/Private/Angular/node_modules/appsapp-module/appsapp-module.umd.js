(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs/Observable'), require('rxjs/add/operator/map'), require('appsapp-cli'), require('angularfire2/database'), require('angularfire2/firestore'), require('angularfire2/auth'), require('@firebase/app'), require('angular-2-local-storage'), require('object-hash'), require('@mobiscroll/angular'), require('@angular/common/http'), require('@angular/forms')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'rxjs/Observable', 'rxjs/add/operator/map', 'appsapp-cli', 'angularfire2/database', 'angularfire2/firestore', 'angularfire2/auth', '@firebase/app', 'angular-2-local-storage', 'object-hash', '@mobiscroll/angular', '@angular/common/http', '@angular/forms'], factory) :
	(factory((global['appsapp-module'] = {}),global.core,global.common,global.Observable,null,global.appsappCli,global.database,global.firestore,global.auth,global.app,global.angular2LocalStorage,global.objectHash,global.angular,global.http,global.forms));
}(this, (function (exports,core,common,Observable,map,appsappCli,database,firestore,auth,app,angular2LocalStorage,objectHash,angular,http,forms) { 'use strict';

/**
 * @abstract
 */
var AbstractComponent = (function () {
    /**
     * @param {?} appFrameworkProvider
     */
    function AbstractComponent(appFrameworkProvider) {
        this.appFrameworkProvider = appFrameworkProvider;
        if (appFrameworkProvider) {
            this.config = appFrameworkProvider.config;
        }
    }
    /**
     * @return {?}
     */
    AbstractComponent.prototype.observer = function () {
        var _this = this;
        return new Observable.Observable(function (observer) {
            _this.stateObserver = observer;
        });
    };
    /**
     * @return {?}
     */
    AbstractComponent.prototype.complete = function () {
        if (this.stateObserver) {
            this.stateObserver.complete();
        }
    };
    return AbstractComponent;
}());

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ConfigModel = (function (_super) {
    __extends$1(ConfigModel, _super);
    function ConfigModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.firebaseProjectId = '';
        _this.firebaseApiKey = '';
        _this.authenticationMethod = 'mail';
        _this.projectLabel = 'm';
        _this.firebaseUserName = '';
        _this.firebaseUserPassword = '';
        return _this;
    }
    /**
     * set operating system
     * @param {?} os
     * @return {?}
     */
    ConfigModel.prototype.setOs = function (os) {
        this._os = os;
        return this;
    };
    /**
     * get operating system
     * @return {?}
     */
    ConfigModel.prototype.getOs = function () {
        return this._os;
    };
    /**
     * get firebase users password
     * @return {?}
     */
    ConfigModel.prototype.getFirebaseUserPassword = function () {
        return this.firebaseUserPassword;
    };
    /**
     * set firebases user password
     * @param {?} firebaseUserPassword
     * @return {?}
     */
    ConfigModel.prototype.setFirebaseUserPassword = function (firebaseUserPassword) {
        this.firebaseUserPassword = firebaseUserPassword;
        return this;
    };
    /**
     * get firebase username
     * @return {?}
     */
    ConfigModel.prototype.getFirebaseUserName = function () {
        return this.firebaseUserName;
    };
    /**
     * set firebase username
     * @param {?} firebaseUserName
     * @return {?}
     */
    ConfigModel.prototype.setFirebaseUserName = function (firebaseUserName) {
        this.firebaseUserName = firebaseUserName;
        return this;
    };
    /**
     * set project label
     * @param {?} projectLabel
     * @return {?}
     */
    ConfigModel.prototype.setProjectLabel = function (projectLabel) {
        this.projectLabel = projectLabel;
        return this;
    };
    /**
     * set firebase api key
     * @param {?} firebaseApiKey
     * @return {?}
     */
    ConfigModel.prototype.setFirebaseApiKey = function (firebaseApiKey) {
        this.firebaseApiKey = firebaseApiKey;
        return this;
    };
    /**
     * get project label
     * @return {?}
     */
    ConfigModel.prototype.getProjectLabel = function () {
        return this.projectLabel;
    };
    /**
     * set authenticationMethod
     * @param {?} authenticationMethod
     * @return {?}
     */
    ConfigModel.prototype.setAuthenticationMethod = function (authenticationMethod) {
        this.authenticationMethod = authenticationMethod;
        return this;
    };
    /**
     * get authenticationMethod
     * @return {?}
     */
    ConfigModel.prototype.getAuthenticationMethod = function () {
        return this.authenticationMethod;
    };
    /**
     * get firebase project id
     * @return {?}
     */
    ConfigModel.prototype.getFirebaseProjectId = function () {
        return this.firebaseProjectId;
    };
    /**
     * get firebase database url
     * @return {?}
     */
    ConfigModel.prototype.getFirebaseDatabaseURL = function () {
        return 'https://' + this.firebaseProjectId + '.firebaseio.com/';
    };
    /**
     * get firebase auth domain
     * @return {?}
     */
    ConfigModel.prototype.getFirebaseAuthDomain = function () {
        return this.firebaseProjectId + '.firebaseio.com';
    };
    /**
     * get firebase database url
     * @return {?}
     */
    ConfigModel.prototype.getFirebaseApiKey = function () {
        return this.firebaseApiKey;
    };
    /**
     * set firebase project id
     * @param {?} firebaseProjectId
     * @return {?}
     */
    ConfigModel.prototype.setFirebaseProjectId = function (firebaseProjectId) {
        this.firebaseProjectId = firebaseProjectId;
        return this;
    };
    return ConfigModel;
}(appsappCli.PersistableModel));

var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var FirebaseModel = (function (_super) {
    __extends$2(FirebaseModel, _super);
    function FirebaseModel() {
        var _this = _super.call(this) || this;
        _this.config = {};
        _this.firebase = app.firebase;
        return _this;
    }
    /**
     * Get firebase realtime dabase
     * @return {?} Promise<AngularFireDatabase>
     */
    FirebaseModel.prototype.getDatabase = function () {
        var /** @type {?} */ self = this;
        return new Promise(function (resolve) {
            if (self.instance && self.database) {
                resolve(self.database);
            }
            self.getObservable().subscribe(function () {
                if (self.instance && self.database) {
                    resolve(self.database);
                }
            });
        });
    };
    /**
     * get firebase firestore
     * @return {?} Promise<AngularFirestore>
     */
    FirebaseModel.prototype.getFirestore = function () {
        var /** @type {?} */ self = this;
        return new Promise(function (resolve) {
            if (self.instance && self.firestore) {
                resolve(self.firestore);
            }
            self.getObservable().subscribe(function () {
                if (self.instance && self.firestore) {
                    resolve(self.firestore);
                }
            });
        });
    };
    /**
     * get firebase auth
     * @return {?} Promise<AngularFireAuth>
     */
    FirebaseModel.prototype.getAuth = function () {
        var /** @type {?} */ self = this;
        return new Promise(function (resolve) {
            if (self.instance && self.auth) {
                resolve(self.auth);
            }
            self.getObservable().subscribe(function () {
                if (self.instance && self.auth) {
                    resolve(self.auth);
                }
            });
        });
    };
    /**
     * get current app config
     * @return {?}
     */
    FirebaseModel.prototype.getFirebaseAppConfig = function () {
        return this.firebaseAppConfig;
    };
    /**
     * set firebase cordova plugin
     * @return {?}
     */
    FirebaseModel.prototype.getFirebasePlugin = function () {
        return this.firebasePlugin;
    };
    /**
     * get firebase cordova plugin
     * @param {?} firebasePlugin
     * @return {?}
     */
    FirebaseModel.prototype.setFirebasePlugin = function (firebasePlugin) {
        this.firebasePlugin = firebasePlugin;
        return this;
    };
    /**
     * return firebase instance
     * @return {?} firebase
     */
    FirebaseModel.prototype.getInstance = function () {
        return this.instance;
    };
    /**
     * get latest firebase config
     * @return {?}
     */
    FirebaseModel.prototype.getConfig = function () {
        return this.config;
    };
    /**
     * initialize firebase instance
     * @param {?} config
     * @return {?}
     */
    FirebaseModel.prototype.init = function (config) {
        var _this = this;
        var /** @type {?} */ rawConfig = {
            'firebaseProjectId': config.firebaseProjectId !== undefined ? config.firebaseProjectId : (config.getFirebaseProjectId !== undefined ? config.getFirebaseProjectId() : null),
            'firebaseApiKey': config.firebaseApiKey !== undefined ? config.firebaseApiKey : (config.getFirebaseApiKey !== undefined ? config.getFirebaseApiKey() : null),
            'firebaseDatabaseURL': config.firebaseDatabaseURL !== undefined ? config.firebaseDatabaseURL : (config.getFirebaseDatabaseURL !== undefined ? config.getFirebaseDatabaseURL() : null),
            'firebaseAuthDomain': config.firebaseAuthDomain !== undefined ? config.firebaseAuthDomain : (config.getFirebaseAuthDomain !== undefined ? config.getFirebaseAuthDomain() : null),
        };
        if (rawConfig.firebaseProjectId && rawConfig.firebaseApiKey && this.firebase) {
            this.config = config;
            var /** @type {?} */ isexisting_1 = false;
            this.firebase.apps.forEach(function (f) {
                if (f.name == config.getFirebaseProjectId()) {
                    isexisting_1 = true;
                    _this.instance = f;
                }
            });
            if (isexisting_1 === false) {
                try {
                    this.firebaseAppConfig = {
                        databaseURL: rawConfig.firebaseDatabaseURL ? rawConfig.firebaseDatabaseURL : 'https://' + rawConfig.firebaseProjectId + '.firebaseio.com',
                        authDomain: rawConfig.firebaseAuthDomain ? rawConfig.firebaseAuthDomain : 'https://' + rawConfig.firebaseProjectId + '.firebaseio.com',
                        projectId: rawConfig.firebaseProjectId,
                        apiKey: rawConfig.firebaseApiKey
                    };
                    this.instance = this.firebase.initializeApp(this.firebaseAppConfig, rawConfig.firebaseProjectId);
                }
                catch (error) {
                    console.log(error);
                    this.instance = null;
                }
            }
            if (this.instance && this.instance.firebase !== undefined) {
                this.database = new database.AngularFireDatabase(this.instance);
                this.firestore = new firestore.AngularFirestore(this.instance, false);
                this.auth = new auth.AngularFireAuth(this.instance);
                this.emit();
            }
        }
        return this;
    };
    return FirebaseModel;
}(appsappCli.PersistableModel));

var PersistenceManager = (function () {
    function PersistenceManager() {
        var _this = this;
        this._pendingChangesModels = {};
        var self = this;
        var storage = new angular2LocalStorage.LocalStorageService({ storageType: 'localStorage', prefix: 'appsapps-' });
        this.storageWrapper = {
            set: function (key, set) {
                return new Promise(function (resolve, reject) {
                    resolve(storage.set(key, set));
                });
            },
            get: function (key) {
                return new Promise(function (resolve, reject) {
                    resolve(storage.get(key));
                });
            },
            clear: function () {
                return new Promise(function (resolve, reject) {
                    resolve(storage.remove());
                });
            },
            remove: function (key) {
                return new Promise(function (resolve, reject) {
                    resolve(storage.remove(key));
                });
            },
            ready: function () {
                return new Promise(function (resolve, reject) {
                    resolve(true);
                });
            }
        };
        this.observable = new Observable.Observable(function (observer) {
            self.observer = observer;
        });
        self.storageWrapper.get('_pendingChanges').then(function (data) {
            _this._pendingChangesModels = data && Object.keys(data).length ? data : {};
        });
    }
    /**
     * get persistence managers oberserver
     * @return {?}
     */
    PersistenceManager.prototype.getObserver = function () {
        return this.observer;
    };
    /**
     * connect with firebaseModel
     * @param {?} firebaseModel
     * @return {?}
     */
    PersistenceManager.prototype.setFirebase = function (firebaseModel) {
        var /** @type {?} */ self = this;
        firebaseModel.getDatabase().then(function (database$$1) {
            self.firebaseDatabase = database$$1;
        });
        firebaseModel.getAuth().then(function (auth$$1) {
            auth$$1.authState.subscribe(function (user) {
                if (self.observer) {
                    self.observer.next({ action: 'initFirebaseDatabase' });
                }
            });
        });
        this.firebaseModel = firebaseModel;
        return this;
    };
    /**
     * get firebase
     * @return {?}
     */
    PersistenceManager.prototype.getFirebase = function () {
        return this.firebaseModel;
    };
    /**
     * get firebase user uuid
     * return string|null
     * @return {?}
     */
    PersistenceManager.prototype.getFirebaseUserId = function () {
        if (this.getFirebaseDatabase() && this.getFirebaseDatabase().app && this.getFirebaseDatabase().app.auth().currentUser) {
            return this.getFirebaseDatabase().app.auth().currentUser.uid;
        }
        return null;
    };
    /**
     * get firebase database
     * @return {?}
     */
    PersistenceManager.prototype.getFirebaseDatabase = function () {
        return this.firebaseDatabase;
    };
    /**
     * storage ready promise
     * @return {?}
     */
    PersistenceManager.prototype.ready = function () {
        return this.storageWrapper.ready();
    };
    /**
     * @param {?} model
     * @return {?}
     */
    PersistenceManager.prototype.initModelForFirebaseDatabase = function (model) {
        var _this = this;
        var /** @type {?} */ self = this;
        if (!model.getPersistenceManager() || !model.getFirebaseDatabasePath()) {
            model.setPersistenceManager(this);
            this.observable.subscribe(function (data) {
                if (data.action == 'connected' && model.getFirebaseDatabase() && model.getFirebaseDatabasePath()) {
                    _this.workOnPendingChanges(model);
                }
                if (data.action == 'initFirebaseDatabase' && self.getFirebasePath(model)) {
                    model.setFirebaseDatabase(self.getFirebaseDatabase());
                    model.setFirebaseDatabasePath(self.getFirebasePath(model));
                }
                if (data.action == 'initFirebaseDatabase' && model.getFirebaseDatabase() && model.getFirebaseDatabasePath()) {
                    model.setFirebaseDatabaseObject(model.getFirebaseDatabase().object(model.getFirebaseDatabasePath() + "/data")).getFirebaseDatabaseObject().snapshotChanges().subscribe(function (action) {
                        if (model.hasPendingChanges()) {
                            window.setTimeout(function () {
                                self.workOnPendingChanges(model).then(function () {
                                    model.setHasPendingChanges(false).emit();
                                }).catch();
                            }, 2000);
                        }
                        else {
                            model.loadJson(action.payload.val()).then(function (m) {
                                m.emit();
                            }).catch(function (error) {
                                //
                                console.log('error', error);
                            });
                        }
                    }, function (error) {
                        // skip access denied
                    });
                }
            });
        }
        return this;
    };
    /**
     * save one model to storage
     * @param {?} model
     * @param {?} observer
     * @param {?} action
     * @return {?}
     */
    PersistenceManager.prototype.action = function (model, observer, action) {
        var /** @type {?} */ self = this;
        return new Promise(function (resolve, reject) {
            self.callAction(model, observer, action, resolve, reject);
        });
    };
    /**
     *
     * @param {?} model
     * @param {?} observer
     * @param {?} action
     * @param {?} resolve
     * @param {?} reject
     * @return {?} void
     */
    PersistenceManager.prototype.callAction = function (model, observer, action, resolve, reject) {
        var /** @type {?} */ self = this, /** @type {?} */ c = self.getActionDataWithIdentifier(action, model);
        observer.next(model.getMessage('processing'));
        self.observable.subscribe(function (data) {
            var /** @type {?} */ timeout = null;
            if (data.action == 'disconnected') {
                observer.next(model.getMessage('disconnected'));
                timeout = window.setTimeout(function () {
                    if (!model.isOnline()) {
                        observer.next(model.getMessage('submittedInBackground'));
                        window.setTimeout(function () {
                            observer.complete();
                        }, 5000);
                    }
                }, 15000);
            }
            if (data.action == 'connected') {
                window.clearTimeout(timeout);
                observer.next(model.getMessage('connected'));
                window.setTimeout(function () {
                    observer.next(model.getMessage('processing'));
                }, 3000);
            }
        });
        model.getFirebaseDatabase().object(model.getFirebaseDatabasePath() + '/action').set(c).then(function (data) {
            model.setHasPendingChanges(false);
            model.getFirebaseDatabase().object(model.getFirebaseDatabasePath() + '/action/' + Object.keys(c)[0]).snapshotChanges().subscribe(function (action) {
                var /** @type {?} */ p = action.payload.val();
                if (p && p.state && p.state !== 'requested') {
                    if (p.message && p.message !== 'done' && p.state !== 'done' && p.state !== 'error') {
                        observer.next(model.getMessage(p.message));
                    }
                    if (p.state == 'error') {
                        observer.error(p.message ? p.message : 'error');
                    }
                    if (p.state == 'done') {
                        if (p.message && p.message !== 'done') {
                            observer.next(model.getMessage(p.message));
                            observer.complete();
                        }
                        else {
                            observer.complete();
                        }
                    }
                }
            }, function (error) {
                // skip access denied
            });
        }).catch(function (error) {
            reject(error);
        });
    };
    /**
     * save one model to storage
     * @param {?} model
     * @param {?} observer
     * @param {?=} action
     * @param {?=} localStorageOnly
     * @return {?}
     */
    PersistenceManager.prototype.save = function (model, observer, action, localStorageOnly) {
        var /** @type {?} */ self = this;
        return new Promise(function (resolve, reject) {
            model.validate(localStorageOnly).then(function () {
                self.storageWrapper.set(self.getPersistanceIdentifier(model), model.serialize(false, true)).then(function (m) {
                    if (!localStorageOnly && model.getFirebaseDatabasePath() && model.getFirebaseDatabase()) {
                        self.clone(model).then(function (c) {
                            model.getFirebaseDatabase().object(model.getFirebaseDatabasePath() + '/data').set(c.transformAllProperties().serialize(true, true)).then(function (data) {
                                if (action) {
                                    self.callAction(model, observer, action, resolve, reject);
                                }
                                else {
                                    model.setHasPendingChanges(false);
                                }
                                resolve(model);
                            }).catch(function (error) {
                                reject(error);
                            });
                        }).catch(function (error) {
                            reject(error);
                        });
                    }
                    else {
                        resolve(model);
                    }
                }).catch(function (error) {
                    reject(error);
                });
            }).catch(function (error) {
                reject(error);
            });
        });
    };
    /**
     * prepare action data for transmitting
     * @param {?} action
     * @param {?} model
     * @return {?}
     */
    PersistenceManager.prototype.getActionDataWithIdentifier = function (action, model) {
        var /** @type {?} */ d = {};
        action.state = 'requested';
        d[objectHash.sha1([model.serialize(true), action])] = action;
        return d;
    };
    /**
     * get hash
     * @param {?} string
     * @return {?}
     */
    PersistenceManager.prototype.getHash = function (string) {
        return objectHash.sha1(string);
    };
    /**
     * load and autosave data model
     * @param {?} model
     * @param {?=} data
     * @return {?}
     */
    PersistenceManager.prototype.initAndload = function (model, data) {
        var /** @type {?} */ self = this;
        return new Promise(function (resolve, reject) {
            self.initModelForFirebaseDatabase(model);
            self.load(model).then(function (m) {
                // set default data
                if (data) {
                    Object.keys(data).forEach(function (property) {
                        model[property] = data[property];
                    });
                }
                // loaded and update bindings
                Object.keys(model.__bindingsObserver).forEach(function (property) {
                    model.__bindingsObserver[property].next(model[property]);
                });
                resolve(model);
            }).catch(function () {
                resolve(model);
            });
        });
    };
    /**
     * load one model from storage
     * @param {?} model
     * @param {?=} json
     * @return {?}
     */
    PersistenceManager.prototype.load = function (model, json) {
        var /** @type {?} */ self = this;
        return new Promise(function (resolve, reject) {
            if (json == undefined) {
                self.storageWrapper.ready().then(function (data) {
                    self.storageWrapper.get(self.getPersistanceIdentifier(model)).then(function (json) {
                        if (json) {
                            model.loadJson(json).then(function (model) {
                                resolve(model.emit());
                            }).catch(function (error) {
                                reject(error);
                            });
                        }
                        else {
                            resolve(model.emit());
                        }
                    }).catch(function (error) {
                        reject(error);
                    });
                });
            }
            else {
                model.loadJson(json).then(function (model) {
                    resolve(model.emit());
                }).catch(function (error) {
                    reject(error);
                });
            }
        });
    };
    /**
     * delete one model from storage
     * @param {?} model
     * @return {?}
     */
    PersistenceManager.prototype.delete = function (model) {
        var /** @type {?} */ self = this;
        return new Promise(function (resolve, reject) {
            self.storageWrapper.ready().then(function (data) {
                self.storageWrapper.remove(self.getPersistanceIdentifier(model)).then(function () {
                    var /** @type {?} */ m = new model.constructor(model.getObserver(), model.getObservable());
                    model = m;
                    m.emit();
                    resolve(m);
                }).catch(function (error) {
                    reject(error);
                });
            });
        });
    };
    /**
     * clone  model
     * @param {?} model
     * @return {?}
     */
    PersistenceManager.prototype.clone = function (model) {
        return new Promise(function (resolve, reject) {
            var /** @type {?} */ m = new model.constructor();
            m.loadJson(model.serialize(true, true)).then(function (m) {
                m['__hashedValues'] = model['__hashedValues'];
                resolve(m);
            }).catch(function (error) {
                reject(error);
            });
        });
    };
    /**
     * Clear the entire key value store. WARNING: HOT!
     * @return {?}
     */
    PersistenceManager.prototype.clear = function () {
        var /** @type {?} */ self = this;
        return new Promise(function (resolve, reject) {
            self.storageWrapper.ready().then(function (data) {
                self.storageWrapper.clear().then(function () {
                    resolve(true);
                }).catch(function (error) {
                    resolve(error);
                });
            });
        });
    };
    /**
     * work pending changes
     * @param {?} model
     * @return {?}
     */
    PersistenceManager.prototype.workOnPendingChanges = function (model) {
        var /** @type {?} */ self = this;
        return new Promise(function (resolve, reject) {
            if (Object.keys(self._pendingChangesModels).length === 0) {
                resolve();
                return null;
            }
            Object.keys(self._pendingChangesModels).forEach(function (object) {
                if (self._pendingChangesModels[object]) {
                    self.storageWrapper.get(object).then(function (json) {
                        var /** @type {?} */ o = json;
                        try {
                            delete o._hasPendingChanges;
                        }
                        catch (e) {
                            // e
                        }
                        if (self._pendingChangesModels[object].firebase.path) {
                            try {
                                model.getFirebaseDatabase().object(self._pendingChangesModels[object].firebase.path + "/data").set(o).then(function (data) {
                                    if (self._pendingChangesModels[object] && self._pendingChangesModels[object].action) {
                                        model.getFirebaseDatabase().object(self._pendingChangesModels[object].firebase.path + "/action").update(self._pendingChangesModels[object].action).then(function (data) {
                                            try {
                                                delete self._pendingChangesModels[object];
                                            }
                                            catch (e) {
                                                // e
                                            }
                                            self.updatePropertyFromLocalStorage('_hasPendingChanges', false, object).then(function (o) {
                                                resolve(o);
                                            }).catch(function (error) {
                                                reject(error);
                                            });
                                        }).catch(function (error) {
                                            reject(error);
                                        });
                                    }
                                    else {
                                        try {
                                            delete self._pendingChangesModels[object];
                                        }
                                        catch (e) {
                                            // e
                                        }
                                        self.updatePropertyFromLocalStorage('_hasPendingChanges', false, object).then(function (o) {
                                            resolve(o);
                                        }).catch(function (error) {
                                            reject(error);
                                        });
                                    }
                                }).catch(function (error) {
                                    try {
                                        delete self._pendingChangesModels[object];
                                    }
                                    catch (e) {
                                        //
                                    }
                                    self.storageWrapper.set('_pendingChanges', self._pendingChangesModels).then(function (m) {
                                        resolve(o);
                                    }).catch(function (e) {
                                        reject(error);
                                    });
                                });
                            }
                            catch (e) {
                                reject(e);
                            }
                        }
                        else {
                            delete self._pendingChangesModels[object];
                        }
                    });
                }
            });
        });
    };
    /**
     * mark model as has pending changes state
     * @param {?} model
     * @param {?=} action
     * @return {?}
     */
    PersistenceManager.prototype.addPendingChanges = function (model, action) {
        var /** @type {?} */ self = this;
        var /** @type {?} */ i = this.getPersistanceIdentifier(model);
        if (this._pendingChangesModels[i] === undefined) {
            this._pendingChangesModels[i] = {};
        }
        if (this._pendingChangesModels[i]['action'] === undefined) {
            this._pendingChangesModels[i]['action'] = {};
        }
        if (action) {
            var /** @type {?} */ a = this.getActionDataWithIdentifier(action, model);
            this._pendingChangesModels[i]['action'][Object.keys(a)[0]] = a[Object.keys(a)[0]];
        }
        this._pendingChangesModels[i]['constructor'] = model.constructor.name;
        this._pendingChangesModels[i]['firebase'] = {
            'path': self.getFirebasePath(model)
        };
        if (model.isOnline() === false) {
            self.storageWrapper.set('_pendingChanges', this._pendingChangesModels).then(function (m) {
                //
            }).catch(function (e) {
                console.log(e);
            });
        }
    };
    /**
     * update property from local storage
     * @param {?} property
     * @param {?} value
     * @param {?} identifier
     * @return {?}
     */
    PersistenceManager.prototype.updatePropertyFromLocalStorage = function (property, value, identifier) {
        var /** @type {?} */ self = this;
        return new Promise(function (resolve, reject) {
            self.storageWrapper.get(identifier).then(function (json) {
                if (json) {
                    json[property] = value;
                    self.storageWrapper.set(identifier, json).then(function (object) {
                        resolve(object);
                    });
                }
                else {
                    reject(identifier);
                }
            }).catch(function (error) {
                reject(error);
            });
        });
    };
    /**
     * mark model as has pending changes state
     * @param {?} model
     * @return {?}
     */
    PersistenceManager.prototype.removePendingChanges = function (model) {
        try {
            delete this._pendingChangesModels[this.getPersistanceIdentifier(model)];
        }
        catch (e) {
            // skipp
        }
        if (Object.keys(this._pendingChangesModels).length) {
            this.storageWrapper.set('_pendingChanges', this._pendingChangesModels).then(function () {
            }).catch(function (e) {
                console.log(e);
            });
        }
        else {
            this.storageWrapper.remove('_pendingChanges').then(function () {
            }).catch(function (e) {
                console.log(e);
            });
        }
    };
    /**
     * get persistence identifier from model
     * @param {?} model
     * @return {?}
     */
    PersistenceManager.prototype.getPersistanceIdentifier = function (model) {
        return "_" + model.getObjectIdentifier() + "_" + model.getUuid();
    };
    /**
     * get firebase path
     * @param {?} model
     * @return {?}
     */
    PersistenceManager.prototype.getFirebasePath = function (model) {
        if (model.getUuid() && this.getFirebaseUserId()) {
            return model.getFirebaseDatabaseRoot() + '/' + this.getFirebaseUserId() + '/project/' + model.getObjectIdentifier() + "/" + model.getUuid();
        }
        else {
            return null;
        }
    };
    return PersistenceManager;
}());
PersistenceManager.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
PersistenceManager.ctorParameters = function () { return []; };

var AppsappModuleProvider = (function () {
    /**
     * @param {?} providerConfig
     * @param {?} providerMessages
     * @param {?} http
     */
    function AppsappModuleProvider(providerConfig, providerMessages, http$$1) {
        this.providerConfig = providerConfig;
        this.providerMessages = providerMessages;
        this.http = http$$1;
        var self = this;
        this.persistenceManager = new PersistenceManager();
        // init configuration instance
        this.config = new ConfigModel();
        // init projects firebase instance
        this.firebaseProject = new FirebaseModel();
        this.firebaseProject.init({
            firebaseProjectId: providerConfig.projectId,
            firebaseApiKey: providerConfig.apiKey,
            firebaseDatabaseURL: 'https://' + providerConfig.projectId + '.firebaseio.com/',
            firebaseAuthDomain: 'https://' + providerConfig.projectId + '.firebaseio.com/'
        });
        // init notification provider
        var timeout = null;
        this.notificationProvider = function (message, error) {
            if (!error) {
                if (timeout) {
                    window.clearTimeout(timeout);
                }
                timeout = window.setTimeout(function () {
                    angular.mobiscroll.toast({
                        message: message
                    }).then();
                }, timeout ? 1000 : 1);
            }
            else {
                if (typeof message == 'string') {
                    angular.mobiscroll.alert({
                        title: providerMessages.error,
                        message: message
                    });
                }
                else {
                    console.log(message);
                    angular.mobiscroll.toast({
                        message: providerMessages.error
                    }).then();
                }
            }
        };
        this.config.getObservable().subscribe(function (config) {
            // try to auto-login
            if (self.config.getFirebaseUserPassword() && self.config.getFirebaseUserName()) {
                self.userSignIn(self.config.getFirebaseUserName(), self.config.getFirebaseUserPassword()).then(function (user) {
                    //
                }).catch(function (error) {
                    console.log(error);
                });
            }
            else {
                // try to authenticate with Firebase Anonymously
                self.anonymousSignIn().then(function (user) {
                    //
                }).catch(function (error) {
                    console.log(error);
                });
            }
        });
        // connect persistence manager to projects firebase instance
        this.firebaseProject.getAuth().then(function (auth$$1) {
            auth$$1.authState.subscribe(function (user) {
                if (user) {
                    self.persistenceManager.setFirebase(self.firebaseProject);
                }
            });
        });
    }
    /**
     * get http client
     * @return {?} HttpClient
     */
    AppsappModuleProvider.prototype.getHttpClient = function () {
        return this.http;
    };
    /**
     * creates and return new persistable model
     * @param {?} constructor
     * @param {?=} uuid string
     * @param {?=} data
     * @return {?} any
     */
    AppsappModuleProvider.prototype.new = function (constructor, uuid, data) {
        var /** @type {?} */ model = new constructor();
        var /** @type {?} */ pm = new PersistenceManager();
        var /** @type {?} */ self = this;
        if (uuid) {
            model.setUuid(uuid);
        }
        var /** @type {?} */ p = new Promise(function (resolve, reject) {
            model.setHttpClient(self.http).setNotificationProvider(self.notificationProvider).setMessages(self.providerMessages).setPersistenceManager(pm.setFirebase(self.firebaseProject)).getPersistenceManager().initAndload(model, data).then(function (model) {
                resolve(model);
            }).catch(function () {
                resolve(model);
            });
        });
        model.setIsLoadedPromise(p);
        model.setAppsAppModuleProvider(this);
        return model;
    };
    /**
     * sets platform provider
     * @param {?} platform
     * @return {?}
     */
    AppsappModuleProvider.prototype.setPlatform = function (platform) {
        /**
         * | Platform Name   | Description                        |
         * |-----------------|------------------------------------|
         * | android         | on a device running Android.       |
         * | cordova         | on a device running Cordova.       |
         * | core            | on a desktop device.               |
         * | ios             | on a device running iOS.           |
         * | ipad            | on an iPad device.                 |
         * | iphone          | on an iPhone device.               |
         * | mobile          | on a mobile device.                |
         * | mobileweb       | in a browser on a mobile device.   |
         * | phablet         | on a phablet device.               |
         * | tablet          | on a tablet device.                |
         * | windows         | on a device running Windows.       |
         */
        if (platform.is('ios')) {
            this.config.setOs('ios');
        }
        else if (platform.is('android')) {
            this.config.setOs('android');
        }
        else if (platform.is('core')) {
            this.config.setOs('desktop');
        }
        else if (platform.is('windows')) {
            this.config.setOs('windows');
        }
        else {
            this.config.setOs('browser');
        }
    };
    /**
     * get persitence manager
     * @return {?}
     */
    AppsappModuleProvider.prototype.getPersistenceManager = function () {
        return this.persistenceManager;
    };
    /**
     * Login user with email and password
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    AppsappModuleProvider.prototype.userSignIn = function (username, password) {
        var /** @type {?} */ self = this;
        return new Promise(function (resolve, reject) {
            if (self.config.getAuthenticationMethod() == 'mail') {
                self.firebaseProject.getAuth().then(function (auth$$1) {
                    auth$$1.auth.signInWithEmailAndPassword(username, password).then(function (user) {
                        resolve(user);
                    }).catch(function (error) {
                        reject(error);
                    });
                });
            }
        });
    };
    /**
     * Login anonymous
     * @return {?}
     */
    AppsappModuleProvider.prototype.anonymousSignIn = function () {
        var /** @type {?} */ self = this;
        return new Promise(function (resolve, reject) {
            self.firebaseProject.getAuth().then(function (auth$$1) {
                auth$$1.auth.signInAnonymously().then(function (user) {
                    resolve(user);
                }).catch(function (error) {
                    reject(error);
                });
            });
        });
    };
    /**
     * Logout user
     * @return {?}
     */
    AppsappModuleProvider.prototype.userSignOut = function () {
        var /** @type {?} */ self = this;
        return new Promise(function (resolve, reject) {
            self.config.setFirebaseUserPassword('').emit();
            self.firebaseProject.getAuth().then(function (auth$$1) {
                auth$$1.auth.signOut().then(function (next) {
                    resolve(next);
                }, function (error) {
                    resolve(error);
                });
            });
        });
    };
    /**
     *
     * @param {?} data
     * @return {?}
     */
    AppsappModuleProvider.prototype.appsAppEncrypt = function (data) {
        return data;
    };
    return AppsappModuleProvider;
}());
/**
 * @nocollapse
 */
AppsappModuleProvider.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: core.Inject, args: ['config',] },] },
    { type: undefined, decorators: [{ type: core.Inject, args: ['messages',] },] },
    { type: http.HttpClient, },
]; };

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generate d class for the AppsappInputComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputComponent = (function (_super) {
    __extends(AppsappInputComponent, _super);
    /**
     * @param {?} appsappModuleProvider
     */
    function AppsappInputComponent(appsappModuleProvider) {
        var _this = _super.call(this, appsappModuleProvider) || this;
        _this.appsappModuleProvider = appsappModuleProvider;
        _this.parentPropertyMetadata = null;
        _this.parentProperty = null;
        _this.options = {};
        _this._inputs = [];
        _this.hidden = false;
        return _this;
    }
    /**
     * @return {?}
     */
    AppsappInputComponent.prototype.ngOnInit = function () {
        var _this = this;
        var /** @type {?} */ self = this;
        if (this.model) {
            if (this.property) {
                this._inputs.push({ type: this.model.getType(this.property), property: this.property, parentPropertyMetadata: this.parentPropertyMetadata, parentPropertyM: this.parentProperty, label: this.label, hidden: new Observable.Observable(function (observer) {
                        self.model.getCondition(self.property).subscribe(function (c) {
                            observer.next(self.isHidden(c));
                        });
                    }) });
            }
            else {
                Object.keys(this.model).forEach(function (property) {
                    if (property.substr(0, 1) !== "_") {
                        _this._inputs.push({
                            type: _this.model.getType(property), property: property, parentPropertyMetadata: _this.parentPropertyMetadata, parentProperty: _this.parentProperty, hidden: new Observable.Observable(function (observer) {
                                self.model.getCondition(property).subscribe(function (c) {
                                    observer.next(self.isHidden(c));
                                });
                            })
                        });
                    }
                });
            }
        }
    };
    /**
     * get is hidden from condition action
     * @param {?} condition
     * @return {?}
     */
    AppsappInputComponent.prototype.isHidden = function (condition) {
        var /** @type {?} */ hidden = false;
        switch (condition.action) {
            case 'hide':
                hidden = !condition.state;
                break;
            case 'show':
                hidden = condition.state;
                break;
            default:
                hidden = condition.state;
        }
        return hidden;
    };
    return AppsappInputComponent;
}(AbstractComponent));
AppsappInputComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input',
                template: "\n      <ng-container [ngSwitch]=\"input.type\" *ngFor=\"let input of _inputs\">\n          <ng-container *ngSwitchCase=\"'text'\">\n              <appsapp-input-text [model]=\"model\" [property]=\"input.property\" [label]=\"input.label\" [hidden]=\"input.hidden | async\" [parentPropertyMetadata]=\"input.parentPropertyMetadata\" [parentProperty]=\"input.parentProperty\"></appsapp-input-text>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'number'\">\n              <appsapp-input-number [model]=\"model\" [property]=\"input.property\" [label]=\"input.label\" [hidden]=\"input.hidden | async\" [parentPropertyMetadata]=\"input.parentPropertyMetadata\" [parentProperty]=\"input.parentProperty\"></appsapp-input-number>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'numberplain'\">\n              <appsapp-input-number-plain [model]=\"model\" [property]=\"input.property\" [label]=\"input.label\" [hidden]=\"input.hidden | async\" [parentPropertyMetadata]=\"input.parentPropertyMetadata\" [parentProperty]=\"input.parentProperty\"></appsapp-input-number-plain>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'integer'\">\n              <appsapp-input-integer [model]=\"model\" [property]=\"input.property\" [label]=\"input.label\" [hidden]=\"input.hidden | async\" [parentPropertyMetadata]=\"input.parentPropertyMetadata\" [parentProperty]=\"input.parentProperty\"></appsapp-input-integer>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'tel'\">\n              <appsapp-input-tel [model]=\"model\" [property]=\"input.property\" [label]=\"input.label\" [hidden]=\"input.hidden | async\" [parentPropertyMetadata]=\"input.parentPropertyMetadata\" [parentProperty]=\"input.parentProperty\"></appsapp-input-tel>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'password'\">\n              <appsapp-input-password [model]=\"model\" [property]=\"input.property\" [label]=\"input.label\" [hidden]=\"input.hidden | async\" [parentPropertyMetadata]=\"input.parentPropertyMetadata\" [parentProperty]=\"input.parentProperty\"></appsapp-input-password>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'email'\">\n              <appsapp-input-email [model]=\"model\" [property]=\"input.property\" [label]=\"input.label\" [hidden]=\"input.hidden | async\" [parentPropertyMetadata]=\"input.parentPropertyMetadata\" [parentProperty]=\"input.parentProperty\"></appsapp-input-email>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'url'\">\n              <appsapp-input-url [model]=\"model\" [property]=\"input.property\" [label]=\"input.label\" [hidden]=\"input.hidden | async\" [parentPropertyMetadata]=\"input.parentPropertyMetadata\" [parentProperty]=\"input.parentProperty\"></appsapp-input-url>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'textarea'\">\n              <appsapp-input-textarea [model]=\"model\" [property]=\"input.property\" [label]=\"input.label\" [hidden]=\"input.hidden | async\" [parentPropertyMetadata]=\"input.parentPropertyMetadata\" [parentProperty]=\"input.parentProperty\"></appsapp-input-textarea>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'date'\">\n              <appsapp-input-date [model]=\"model\" [property]=\"input.property\" [label]=\"input.label\" [hidden]=\"input.hidden | async\" [parentPropertyMetadata]=\"input.parentPropertyMetadata\" [parentProperty]=\"input.parentProperty\"></appsapp-input-date>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'dates'\">\n              <appsapp-input-dates [model]=\"model\" [property]=\"input.property\" [label]=\"input.label\" [hidden]=\"input.hidden | async\" [parentPropertyMetadata]=\"input.parentPropertyMetadata\" [parentProperty]=\"input.parentProperty\"></appsapp-input-dates>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'boolean'\">\n              <appsapp-input-boolean [model]=\"model\" [property]=\"input.property\" [label]=\"input.label\" [hidden]=\"input.hidden | async\" [parentPropertyMetadata]=\"input.parentPropertyMetadata\" [parentProperty]=\"input.parentProperty\"></appsapp-input-boolean>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'birthday'\">\n              <appsapp-input-birthday [model]=\"model\" [property]=\"input.property\" [label]=\"input.label\" [hidden]=\"input.hidden | async\" [parentPropertyMetadata]=\"input.parentPropertyMetadata\" [parentProperty]=\"input.parentProperty\"></appsapp-input-birthday>\n          </ng-container> \n          <ng-container *ngSwitchCase=\"'select'\">\n              <appsapp-input-select [model]=\"model\" [property]=\"input.property\" [label]=\"input.label\" [hidden]=\"input.hidden | async\" [parentPropertyMetadata]=\"input.parentPropertyMetadata\" [parentProperty]=\"input.parentProperty\"></appsapp-input-select>\n          </ng-container>     \n          <ng-container *ngSwitchCase=\"'list'\">\n              <appsapp-input-list [model]=\"model\" [property]=\"input.property\" [label]=\"input.label\" [hidden]=\"input.hidden | async\" [parentPropertyMetadata]=\"input.parentPropertyMetadata\" [parentProperty]=\"input.parentProperty\"></appsapp-input-list>\n          </ng-container>\n      </ng-container>\n\n  "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputComponent.ctorParameters = function () { return [
    { type: AppsappModuleProvider, },
]; };
AppsappInputComponent.propDecorators = {
    'property': [{ type: core.Input },],
    'parentPropertyMetadata': [{ type: core.Input },],
    'parentProperty': [{ type: core.Input },],
    'model': [{ type: core.Input },],
    'label': [{ type: core.Input },],
    'options': [{ type: core.Output },],
    '_inputs': [{ type: core.Output },],
    'hidden': [{ type: core.Output },],
};

var __extends$4 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputAbstractComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputAbstractComponent = (function (_super) {
    __extends$4(AppsappInputAbstractComponent, _super);
    /**
     * @param {?} appsappModuleProvider
     */
    function AppsappInputAbstractComponent(appsappModuleProvider) {
        var _this = _super.call(this, appsappModuleProvider) || this;
        _this.appsappModuleProvider = appsappModuleProvider;
        _this._name = '';
        _this._label = '';
        _this._description = '';
        _this._validationMetadata = {};
        _this.hidden = false;
        _this.errormsg = '';
        _this.init();
        return _this;
    }
    /**
     * init with config model
     * @param {?=} config
     * @return {?}
     */
    AppsappInputAbstractComponent.prototype.init = function (config) {
        if (this.property) {
            if (!this.validator) {
                this.validator = this.model.getValidation(this.property);
            }
            if (!this._ngModelGettter) {
                this._ngModelGettter = this.model.getProperty(this.property);
            }
        }
        if (config) {
            var /** @type {?} */ theme = 'material';
            if (config.getOs() == 'ios') {
                theme = 'ios';
            }
            if (config.getOs() == 'windows') {
                theme = 'wp';
            }
            if (config.getOs() == 'desktop') {
                theme = 'material';
            }
            var /** @type {?} */ option = {
                theme: theme,
                lang: 'de'
            };
            if (this.mbsc) {
                this.mbsc.instance.option(option);
            }
            if (this.mbscForm) {
                this.mbscForm.instance.option(option);
            }
            this.afterInit(config);
            this._config = config;
        }
    };
    /**
     * trigger befor init method
     * @return {?}
     */
    AppsappInputAbstractComponent.prototype.beforeInit = function () {
    };
    /**
     * trigger after init method
     * @param {?} options
     * @return {?}
     */
    AppsappInputAbstractComponent.prototype.afterInit = function (options) {
    };
    /**
     * get observable getter method
     * @return {?}
     */
    AppsappInputAbstractComponent.prototype.get = function () {
        return this._ngModelGettter;
    };
    /**
     * set Mbsc Option
     * @param {?} option
     * @return {?}
     */
    AppsappInputAbstractComponent.prototype.setMbscOption = function (option) {
        if (this.mbsc !== undefined && this.mbsc.instance) {
            this.mbsc.instance.option(option);
        }
    };
    /**
     * event before model changes
     * @param {?} model
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    AppsappInputAbstractComponent.prototype.beforeModelChanges = function (model, property, value) {
        return true;
    };
    /**
     * call after constructor
     * @return {?}
     */
    AppsappInputAbstractComponent.prototype.afterConstructor = function () {
    };
    /**
     * model changes event
     * @param {?} event
     * @return {?}
     */
    AppsappInputAbstractComponent.prototype.modelChanges = function (event) {
        if (this.beforeModelChanges(this.model, this.property, event)) {
            this.model.setProperty(this.property, event);
        }
    };
    /**
     * @return {?}
     */
    AppsappInputAbstractComponent.prototype.ngOnInit = function () {
        this.afterConstructor();
        this._validationMetadata = this.model.getMetadata(this.property);
        this._name = this.property;
        this._label = this.label ? this.label : (this.model.getMetadataValue(this.property, 'hasLabel') ? this.model.getMetadataValue(this.property, 'hasLabel') : (this._name ? this._name.toUpperCase() : ''));
        this._description = this.model.getMetadataValue(this.property, 'hasDescription');
    };
    /**
     * ngAfterViewInit
     * @return {?}
     */
    AppsappInputAbstractComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.config) {
            this.config.getObservable().subscribe(function (config) {
                _this.beforeInit();
                _this.init(config);
            });
        }
    };
    /**
     * update property of the main model and main property
     * @param {?} value
     * @return {?}
     */
    AppsappInputAbstractComponent.prototype.update = function (value) {
        var /** @type {?} */ self = this;
        if (this.model) {
            window.setTimeout(function () {
                self._ngModelGettter = self.model.update(self.property, value).setProperty(self.property, value).getProperty(self.property);
            }, 1);
            return this.model;
        }
        else {
            return null;
        }
    };
    return AppsappInputAbstractComponent;
}(AppsappInputComponent));
AppsappInputAbstractComponent.decorators = [
    { type: core.Component, args: [{
                template: ''
            },] },
];
/**
 * @nocollapse
 */
AppsappInputAbstractComponent.ctorParameters = function () { return [
    { type: AppsappModuleProvider, },
]; };
AppsappInputAbstractComponent.propDecorators = {
    'validator': [{ type: core.Output },],
    'hidden': [{ type: core.Output },],
    'errormsg': [{ type: core.Output },],
    'mbsc': [{ type: core.ViewChild, args: ['mbscInstance',] },],
    'mbscForm': [{ type: core.ViewChild, args: ['mbscInstanceForm',] },],
};

var __extends$3 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputUrlComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputUrlComponent = (function (_super) {
    __extends$3(AppsappInputUrlComponent, _super);
    function AppsappInputUrlComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AppsappInputUrlComponent;
}(AppsappInputAbstractComponent));
AppsappInputUrlComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input-url',
                template: "\n        <mbsc-form #mbscInstanceForm=\"mobiscroll\">\n            <mbsc-input [error]=\"validator | async\" type=\"url\" [ngModel]=\"_ngModelGettter | async\" (ngModelChange)=\"modelChanges($event)\">{{_label}}</mbsc-input>\n        </mbsc-form>\n\n    "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputUrlComponent.ctorParameters = function () { return []; };

var __extends$5 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputNumberComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputNumberComponent = (function (_super) {
    __extends$5(AppsappInputNumberComponent, _super);
    function AppsappInputNumberComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {?} config
     * @return {?}
     */
    AppsappInputNumberComponent.prototype.afterInit = function (config) {
        this.setMbscOption({
            scale: this.model.getMetadataValue(this.property, 'hasPrecision') ? this.model.getMetadataValue(this.property, 'hasPrecision') : 2,
            max: this.model.getMetadataValue(this.property, 'max') ? this.model.getMetadataValue(this.property, 'max') : 999999999,
            min: this.model.getMetadataValue(this.property, 'min') ? this.model.getMetadataValue(this.property, 'min') : 0
        });
    };
    return AppsappInputNumberComponent;
}(AppsappInputAbstractComponent));
AppsappInputNumberComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input-number',
                template: "\n        <mbsc-form #mbscInstanceForm=\"mobiscroll\">\n            <mbsc-input [error]=\"validator | async\"  #mbscInstance=\"mobiscroll\" mbsc-numpad-decimal [ngModel]=\"_ngModelGettter | async\" (ngModelChange)=\"modelChanges($event)\">{{_label}}</mbsc-input>\n        </mbsc-form>\n\n    "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputNumberComponent.ctorParameters = function () { return []; };

var __extends$6 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputTextareaComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputTextareaComponent = (function (_super) {
    __extends$6(AppsappInputTextareaComponent, _super);
    function AppsappInputTextareaComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.maxLength = 0;
        _this.currentLength = 0;
        return _this;
    }
    /**
     *
     * @param {?} config
     * @return {?}
     */
    AppsappInputTextareaComponent.prototype.afterInit = function (config) {
        this.maxLength = this.model.getMetadataValue(this.property, 'isText') ? this.model.getMetadataValue(this.property, 'isText') : 0;
        this.label = this._label;
    };
    /**
     * event before model changes
     * @param {?} model
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    AppsappInputTextareaComponent.prototype.beforeModelChanges = function (model, property, value) {
        if (this.maxLength) {
            this.currentLength = value.length;
            this._label = this.label + ' (' + (this.currentLength < this.maxLength ? this.currentLength : this.maxLength) + " / " + this.maxLength + ")";
            if (value.length > this.maxLength) {
                this.update(value.substr(0, this.maxLength));
                return false;
            }
            else {
                return true;
            }
        }
        else {
            return true;
        }
    };
    return AppsappInputTextareaComponent;
}(AppsappInputAbstractComponent));
AppsappInputTextareaComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input-textarea',
                template: "\n        <mbsc-form #mbscInstanceForm=\"mobiscroll\">\n            <mbsc-textarea [error]=\"validator | async\" [ngModel]=\"_ngModelGettter | async\" (ngModelChange)=\"modelChanges($event)\">{{_label}}</mbsc-textarea>\n        </mbsc-form>\n\n    "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputTextareaComponent.ctorParameters = function () { return []; };

var __extends$7 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputTelComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputTelComponent = (function (_super) {
    __extends$7(AppsappInputTelComponent, _super);
    function AppsappInputTelComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.prefix = '';
        return _this;
    }
    /**
     * @return {?}
     */
    AppsappInputTelComponent.prototype.ngAfterContentInit = function () {
        this.prefix = typeof this.model.getMetadataValue(this.property, 'isPhoneNumber') == 'string' ? this.model.getMetadataValue(this.property, 'isPhoneNumber') : '';
    };
    /**
     *
     * @param {?} config
     * @return {?}
     */
    AppsappInputTelComponent.prototype.afterInit = function (config) {
        var /** @type {?} */ d = 'd';
        this.setMbscOption({
            display: config.getOs() !== 'desktop' ? 'bottom' : 'center',
            cssClass: 'md-phone-num',
            template: '{plus}' + d.repeat((this.prefix.length ? this.prefix.length + 13 : 16)),
            maxLength: (this.prefix.length ? this.prefix.length + 13 : 16),
            allowLeadingZero: true,
            leftKey: {
                text: '+',
                value: '',
                variable: 'plus:+'
            },
            formatValue: function (numbers, vars, inst) {
                var /** @type {?} */ newVal = '';
                if (vars.plus) {
                    newVal += vars.plus;
                }
                newVal += numbers.join().replace(/,/g, '');
                return newVal;
            },
            parseValue: function (value) {
                if (value) {
                    return value.toString().split('');
                }
                return [];
            },
            validate: function (event, inst) {
                var /** @type {?} */ disabled = [], /** @type {?} */ invalid = false;
                if (inst.isVisible()) {
                    inst._markup[0].querySelector('.mbsc-np-dsp').innerHTML = inst.settings.formatValue(event.values, event.variables, inst) || '&nbsp;';
                }
                return {
                    invalid: invalid,
                    disabled: disabled
                };
            }
        });
        // this.setMbscOption({
        //   display: 'bottom',
        //   cssClass: 'md-phone-num',
        //   template: '{plus}ddddddddddd',
        //   maxLength: (this.prefix.length ?  this.prefix.length + 13 : 16),
        //   allowLeadingZero: true,
        //   leftKey: {
        //     text: '+',
        //     value: '',
        //     variable: 'plus:+'
        //   }
        // });
    };
    /**
     *
     * @param {?} model
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    AppsappInputTelComponent.prototype.beforeModelChanges = function (model, property, value) {
        var /** @type {?} */ p = this.prefix ? this.prefix : '';
        var /** @type {?} */ f = '';
        var /** @type {?} */ e = value.substr(0, p.length) == p ? value.substr(p.length) : value;
        if (p.length) {
            f = e.replace(/[^0-9]/g, '');
        }
        else {
            f = e.replace(/[^\\+0-9]/g, '');
        }
        f = p.length && f.substr(0, 1) == '0' ? f.substr(1) : f;
        if (p.length) {
            value = p + f.replace(/([0-9]{2})([0-9]{3})([0-9]{2})([0-9]{2})/g, ' \$1 \$2 \$3 \$4');
        }
        else {
            if (f.substr(0, 1) == '+') {
                value = p + f.replace(/([\\+0-9]{3})([0-9]{2})([0-9]{3})([0-9]{2})([0-9]{2})/g, '\$1 \$2 \$3 \$4 \$5');
            }
            else {
                value = p + f.replace(/([0-9]{3})([0-9]{3})([0-9]{2})([0-9]{2})/g, '\$1 \$2 \$3 \$4');
            }
        }
        if (p.length) {
            if (value.length > p.length + 13) {
                value = value.substr(0, p.length + 13);
                this.update(value);
            }
        }
        else {
            if (value.length > p.length + 16) {
                value = value.substr(0, p.length + 16);
                this.update(value);
            }
        }
        return false;
    };
    return AppsappInputTelComponent;
}(AppsappInputAbstractComponent));
AppsappInputTelComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input-tel',
                template: "\n        <mbsc-form #mbscInstanceForm=\"mobiscroll\">\n            <mbsc-input [error]=\"validator | async\"  #mbscInstance=\"mobiscroll\" mbsc-numpad type=\"tel\" [ngModel]=\"_ngModelGettter | async\" (ngModelChange)=\"modelChanges($event)\">{{_label}} {{prefix}}</mbsc-input>\n        </mbsc-form>\n\n    "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputTelComponent.ctorParameters = function () { return []; };
AppsappInputTelComponent.propDecorators = {
    'prefix': [{ type: core.Output },],
};

var __extends$8 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputEmailComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputEmailComponent = (function (_super) {
    __extends$8(AppsappInputEmailComponent, _super);
    function AppsappInputEmailComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AppsappInputEmailComponent;
}(AppsappInputAbstractComponent));
AppsappInputEmailComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input-email',
                template: "\n        <mbsc-form #mbscInstanceForm=\"mobiscroll\">\n            <mbsc-input [error]=\"validator | async\" [error]=\"validator | async\" [ngModel]=\"_ngModelGettter | async\" (ngModelChange)=\"modelChanges($event)\">{{_label}}</mbsc-input>\n        </mbsc-form>\n\n    "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputEmailComponent.ctorParameters = function () { return []; };

var __extends$9 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputDatesComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputDatesComponent = (function (_super) {
    __extends$9(AppsappInputDatesComponent, _super);
    function AppsappInputDatesComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.range = [];
        _this.locked = false;
        return _this;
    }
    /**
     *
     * @param {?} config
     * @return {?}
     */
    AppsappInputDatesComponent.prototype.afterInit = function (config) {
        var /** @type {?} */ self = this;
        this.get().subscribe(function (value) {
            if (!self.locked && value && value.length == 2) {
                self.range = [new Date(value[0]), new Date(value[1])];
            }
        });
        this.setMbscOption({
            onShow: function (event, inst) {
                self.locked = true;
            },
            onCancel: function (event, inst) {
                self.locked = false;
            },
            onSet: function (event, inst) {
                var /** @type {?} */ from = new Date(inst._startDate);
                var /** @type {?} */ to = new Date(inst._endDate);
                self.model.setProperty(self.property, [from, to]);
                self.locked = false;
            }
        });
        var /** @type {?} */ options = this.model.getMetadataValue(this.property, 'dateRange');
        if (options) {
            if (options.maxDate) {
                this.setMbscOption({ max: options.maxDate });
            }
            if (options.minDate) {
                this.setMbscOption({ min: options.minDate });
            }
            if (options.invalid) {
                this.setMbscOption({ invalid: options.invalid });
            }
            if (options.controls) {
                this.setMbscOption({ controls: options.controls });
            }
            if (options.steps) {
                this.setMbscOption({ steps: options.steps });
            }
        }
        this.setMbscOption({
            display: options && options.display ? options.display : (config.getOs() !== 'desktop' ? 'bottom' : 'center')
        });
    };
    /**
     * @param {?} model
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    AppsappInputDatesComponent.prototype.beforeModelChanges = function (model, property, value) {
        return false;
    };
    return AppsappInputDatesComponent;
}(AppsappInputAbstractComponent));
AppsappInputDatesComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input-dates',
                template: "\n        <mbsc-form #mbscInstanceForm=\"mobiscroll\">\n            <mbsc-input [error]=\"validator | async\"  #mbscInstance=\"mobiscroll\" mbsc-range [ngModel]=\"range\"\n                        (ngModelChange)=\"modelChanges($event)\">{{_label}}\n            </mbsc-input>\n        </mbsc-form>\n\n    "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputDatesComponent.ctorParameters = function () { return []; };
AppsappInputDatesComponent.propDecorators = {
    'range': [{ type: core.Input },],
};

var __extends$10 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputDateComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputDateComponent = (function (_super) {
    __extends$10(AppsappInputDateComponent, _super);
    function AppsappInputDateComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} model
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    AppsappInputDateComponent.prototype.beforeModelChanges = function (model, property, value) {
        // create iso date
        var /** @type {?} */ date = Date.parse(value);
        value = !isNaN(date) ? new Date(date) : null;
        console.log(property, value);
        model.setProperty(property, value);
        return false;
    };
    /**
     *
     * @param {?} config
     * @return {?}
     */
    AppsappInputDateComponent.prototype.afterInit = function (config) {
        if (this.model.getMetadataValue(this.property, 'maxDate')) {
            var /** @type {?} */ maxDate = this.model.getMetadataValue(this.property, 'maxDate');
            this.setMbscOption({ max: maxDate });
        }
        if (this.model.getMetadataValue(this.property, 'minDate')) {
            var /** @type {?} */ minDate = this.model.getMetadataValue(this.property, 'minDate');
            this.setMbscOption({ min: minDate });
        }
        var /** @type {?} */ options = this.model.getMetadataValue(this.property, 'calendar');
        if (options) {
            if (options.maxDate) {
                this.setMbscOption({ max: options.maxDate });
            }
            if (options.minDate) {
                this.setMbscOption({ min: options.minDate });
            }
            if (options.invalid) {
                this.setMbscOption({ invalid: options.invalid });
            }
            if (options.controls) {
                this.setMbscOption({ controls: options.controls });
            }
            if (options.steps) {
                this.setMbscOption({ steps: options.steps });
            }
        }
        this.setMbscOption({
            display: options && options.display ? options.display : (config.getOs() !== 'desktop' ? 'bottom' : 'center')
        });
    };
    return AppsappInputDateComponent;
}(AppsappInputAbstractComponent));
AppsappInputDateComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input-date',
                template: "\n        <mbsc-form #mbscInstanceForm=\"mobiscroll\">\n            <mbsc-input [error]=\"validator | async\"  #mbscInstance=\"mobiscroll\" mbsc-calendar [ngModel]=\"_ngModelGettter | async\"\n                        (ngModelChange)=\"modelChanges($event)\">{{_label}}</mbsc-input>\n        </mbsc-form>\n\n    "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputDateComponent.ctorParameters = function () { return []; };

var __extends$11 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputPasswordComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputPasswordComponent = (function (_super) {
    __extends$11(AppsappInputPasswordComponent, _super);
    function AppsappInputPasswordComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AppsappInputPasswordComponent;
}(AppsappInputAbstractComponent));
AppsappInputPasswordComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input-password',
                template: "\n        <mbsc-form #mbscInstanceForm=\"mobiscroll\">\n            <mbsc-input [error]=\"validator | async\" type=\"password\" [password-toggle]=\"true\" [ngModel]=\"_ngModelGettter | async\" (ngModelChange)=\"modelChanges($event)\">{{_label}}</mbsc-input>\n        </mbsc-form>\n\n    "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputPasswordComponent.ctorParameters = function () { return []; };

var __extends$12 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputNumberComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputIntegerComponent = (function (_super) {
    __extends$12(AppsappInputIntegerComponent, _super);
    function AppsappInputIntegerComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.__type = 'default';
        _this.__min = 0;
        _this.__max = 0;
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    AppsappInputIntegerComponent.prototype.modelChanges = function (event) {
        this.model.setProperty(this.property, parseInt(event));
    };
    /**
     * trigger befor init method
     * @return {?}
     */
    AppsappInputIntegerComponent.prototype.beforeInit = function () {
        if (this.model.getMetadataValue(this.property, 'max') <= 25) {
            this.__type = 'stepper';
            this.__min = this.model.getMetadataValue(this.property, 'min') ? this.model.getMetadataValue(this.property, 'min') : 0;
            this.__max = this.model.getMetadataValue(this.property, 'max') ? this.model.getMetadataValue(this.property, 'max') : 999999999;
        }
        else {
            this.setMbscOption({
                scale: 0,
                max: this.model.getMetadataValue(this.property, 'max') ? this.model.getMetadataValue(this.property, 'max') : 999999999,
                min: this.model.getMetadataValue(this.property, 'min') ? this.model.getMetadataValue(this.property, 'min') : 0
            });
        }
    };
    /**
     *
     * @param {?} config
     * @return {?}
     */
    AppsappInputIntegerComponent.prototype.afterInit = function (config) {
    };
    return AppsappInputIntegerComponent;
}(AppsappInputAbstractComponent));
AppsappInputIntegerComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input-integer',
                template: "\n        <mbsc-form #mbscInstanceForm=\"mobiscroll\">\n            <ng-container [ngSwitch]=\"__type\">\n                <mbsc-input [error]=\"validator | async\"  *ngSwitchCase=\"'default'\" #mbscInstance=\"mobiscroll\" mbsc-numpad-decimal [ngModel]=\"_ngModelGettter | async\" (ngModelChange)=\"modelChanges($event)\">{{_label}}</mbsc-input>\n                <mbsc-stepper *ngSwitchCase=\"'stepper'\" #mbscInstance=\"mobiscroll\" [min]=\"__min\" [max]=\"__max\" [ngModel]=\"_ngModelGettter | async\" (ngModelChange)=\"modelChanges($event)\">{{_label}}\n                    <span class=\"mbsc-desc\">{{_description}}</span>\n                </mbsc-stepper>\n            </ng-container>\n        </mbsc-form>\n\n    "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputIntegerComponent.ctorParameters = function () { return []; };
AppsappInputIntegerComponent.propDecorators = {
    '___type': [{ type: core.Output },],
    '___min': [{ type: core.Output },],
    '___max': [{ type: core.Output },],
};

var __extends$13 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputBooleanComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputBooleanComponent = (function (_super) {
    __extends$13(AppsappInputBooleanComponent, _super);
    function AppsappInputBooleanComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AppsappInputBooleanComponent;
}(AppsappInputAbstractComponent));
AppsappInputBooleanComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input-boolean',
                template: "\n        <mbsc-form #mbscInstanceForm=\"mobiscroll\">\n            <mbsc-switch [ngModel]=\"_ngModelGettter | async\" (ngModelChange)=\"modelChanges($event)\">{{_label}}\n                <span class=\"mbsc-desc\">{{_description}}</span>\n            </mbsc-switch>\n        </mbsc-form>\n\n            "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputBooleanComponent.ctorParameters = function () { return []; };

var __extends$14 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputBirthdayComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputBirthdayComponent = (function (_super) {
    __extends$14(AppsappInputBirthdayComponent, _super);
    function AppsappInputBirthdayComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} model
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    AppsappInputBirthdayComponent.prototype.beforeModelChanges = function (model, property, value) {
        // create iso date
        var /** @type {?} */ date = Date.parse(value);
        value = !isNaN(date) ? new Date(date) : null;
        model.setProperty(property, value);
        return false;
    };
    /**
     *
     * @param {?} config
     * @return {?}
     */
    AppsappInputBirthdayComponent.prototype.afterInit = function (config) {
        if (this.model.getMetadataValue(this.property, 'maxDate')) {
            var /** @type {?} */ maxDate = this.model.getMetadataValue(this.property, 'maxDate');
            this.setMbscOption({ max: maxDate });
        }
        else {
            var /** @type {?} */ maxDate = new Date();
            this.setMbscOption({ max: maxDate });
        }
        if (this.model.getMetadataValue(this.property, 'minDate')) {
            var /** @type {?} */ minDate = this.model.getMetadataValue(this.property, 'minDate');
            this.setMbscOption({ min: minDate });
        }
        this.setMbscOption({
            display: config.getOs() !== 'desktop' ? 'bottom' : 'center',
        });
    };
    return AppsappInputBirthdayComponent;
}(AppsappInputAbstractComponent));
AppsappInputBirthdayComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input-birthday',
                template: "\n        <mbsc-form #mbscInstanceForm=\"mobiscroll\">\n            <mbsc-input [error]=\"validator | async\" #mbscInstance=\"mobiscroll\" mbsc-date [ngModel]=\"_ngModelGettter | async\"\n                        (ngModelChange)=\"modelChanges($event)\">{{_label}}</mbsc-input>\n        </mbsc-form>\n\n    "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputBirthdayComponent.ctorParameters = function () { return []; };

var __extends$15 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputTextComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputTextComponent = (function (_super) {
    __extends$15(AppsappInputTextComponent, _super);
    function AppsappInputTextComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.max = null;
        _this.lastvalue = null;
        return _this;
    }
    /**
     *
     * @param {?} config
     * @return {?}
     */
    AppsappInputTextComponent.prototype.afterInit = function (config) {
        if (this.model.getMetadata(this.property, 'maxLength').length) {
            this.max = this.model.getMetadataValue(this.property, 'maxLength');
        }
        if (this.max === null && this.model.getMetadata(this.property, 'length').length) {
            this.max = this.model.getMetadataValue(this.property, 'length')[1];
        }
    };
    /**
     *
     * @param {?} model
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    AppsappInputTextComponent.prototype.beforeModelChanges = function (model, property, value) {
        var /** @type {?} */ changed = false;
        if (this.max !== null && value.length > this.max) {
            value = this.lastvalue;
            changed = true;
        }
        this.lastvalue = value;
        if (changed) {
            this.update(value);
            return false;
        }
        else {
            return true;
        }
    };
    return AppsappInputTextComponent;
}(AppsappInputAbstractComponent));
AppsappInputTextComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input-text',
                template: "\n    <mbsc-form #mbscInstanceForm=\"mobiscroll\">\n      <mbsc-input [error]=\"validator | async\" [ngModel]=\"_ngModelGettter | async\"\n                  (ngModelChange)=\"modelChanges($event)\">{{_label}}\n      </mbsc-input>\n    </mbsc-form>\n\n  "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputTextComponent.ctorParameters = function () { return []; };

var __extends$17 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var SelectModel = (function (_super) {
    __extends$17(SelectModel, _super);
    function SelectModel() {
        var _this = _super.call(this) || this;
        _this.options = [];
        _this.data = [];
        _this.url = '';
        _this.dataType = 'json';
        return _this;
    }
    /**
     * Get options array as promise
     * @return {?} Observable<any>
     */
    SelectModel.prototype.getOptions = function () {
        var /** @type {?} */ self = this;
        var /** @type {?} */ lastHash = null;
        this.getHttpClient().get(this.url).subscribe(function (data) {
            self.update('data', data);
        }, function (error) {
            // skip error
        });
        return new Observable.Observable(function (observer) {
            var /** @type {?} */ o = observer;
            self.getProperty('data').subscribe(function (data) {
                var /** @type {?} */ options = [];
                var /** @type {?} */ currentHash = self.setHashedValue(data);
                if (currentHash !== lastHash) {
                    data.forEach(function (item) {
                        options.push({
                            value: self.setHashedValue(self._getPropertyFromObject(item, self.mapping.value)),
                            text: self._getPropertyFromObject(item, self.mapping.text),
                            disabled: self.mapping.disabled !== undefined ? self._getPropertyFromObject(item, self.mapping.disabled) : false,
                        });
                    });
                    self.update('options', options).saveWithPromise().then(function () {
                        //
                    }).catch(function (e) {
                        console.log(e);
                    });
                    o.next(options);
                }
                lastHash = currentHash;
            });
        });
    };
    /**
     * get property from object
     * @param {?} inputObject
     * @param {?} property
     * @return {?}
     */
    SelectModel.prototype._getPropertyFromObject = function (inputObject, property) {
        var /** @type {?} */ self = this;
        if (typeof property == 'function') {
            return inputObject !== undefined ? property(inputObject) : null;
        }
        if (typeof property == 'string' && property.indexOf(".") > 0) {
            return self._getPropertyFromObject(inputObject[property.substr(0, property.indexOf("."))], property.substr(property.indexOf(".") + 1));
        }
        else {
            return inputObject[property];
        }
    };
    
    return SelectModel;
}(appsappCli.PersistableModel));

var __extends$16 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputSelectComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputSelectComponent = (function (_super) {
    __extends$16(AppsappInputSelectComponent, _super);
    function AppsappInputSelectComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.options = [];
        _this.isUnique = false;
        return _this;
    }
    /**
     * set options
     * @param {?=} values
     * @return {?}
     */
    AppsappInputSelectComponent.prototype.setOptions = function (values) {
        var /** @type {?} */ self = this;
        var /** @type {?} */ optionsPreProcessed = [];
        var /** @type {?} */ currentSelectedOptions = {};
        var /** @type {?} */ value = values === undefined ? this.model.getParent().getPropertyValue(this.parentProperty) : values;
        if (value && value.length) {
            value.forEach(function () {
                value.forEach(function (option) {
                    if (option instanceof appsappCli.PersistableModel && option.getUuid() !== self.model.getUuid()) {
                        option.getPropertyValue(self.property).forEach(function (option) {
                            currentSelectedOptions[option] = true;
                        });
                    }
                });
            });
        }
        var /** @type {?} */ clonedOptions = JSON.parse(JSON.stringify(self.options));
        clonedOptions.forEach(function (option) {
            if (currentSelectedOptions[option.value] !== undefined) {
                option.disabled = true;
            }
            optionsPreProcessed.push(option);
        });
        self.mbsc.instance.refresh(optionsPreProcessed);
    };
    /**
     * @return {?}
     */
    AppsappInputSelectComponent.prototype.applyOptionsPostprocess = function () {
        var /** @type {?} */ self = this;
        if (this.isUnique) {
            this.model.getParent().getChangesWithCallback(function (event) {
                if (event.property == self.parentProperty) {
                    self.setOptions(event.value);
                }
            });
        }
    };
    /**
     * @return {?}
     */
    AppsappInputSelectComponent.prototype.ngAfterContentInit = function () {
        var /** @type {?} */ self = this;
        var /** @type {?} */ data = this.model.getMetadataValue(this.property, 'isSelect');
        if (this.parentPropertyMetadata) {
            this.isUnique = this.model.getMetadataValue(null, 'isList', this.parentPropertyMetadata, 'uniqueItems');
        }
        self.applyOptionsPostprocess();
        if (data) {
            if (data.options && typeof data.options == 'object') {
                this.options = data.options;
            }
            if (data.source) {
                this.appsappModuleProvider.new(SelectModel, this.appsappModuleProvider.getPersistenceManager().getHash(data.source.url), {
                    url: data.source.url,
                    mapping: data.source.mapping
                }).loaded().then(function (select) {
                    select.getOptions().subscribe(function (options) {
                        self.options = options;
                        if (self.isUnique) {
                            self.setOptions();
                        }
                        else {
                            self.mbsc.instance.refresh(options);
                        }
                        select.getHashedValues().forEach(function (v) {
                            self.model.addHashedValue(v.value, v.hash);
                        });
                        var /** @type {?} */ hashedValues = [];
                        self.model.getPropertyValue(self.property, true).forEach(function (value) {
                            hashedValues.push(self.model.setHashedValue(value));
                        });
                        self.update(hashedValues);
                        self.mbsc.instance.setVal(hashedValues, false, true);
                    });
                });
            }
        }
    };
    /**
     *
     * @param {?} config
     * @return {?}
     */
    AppsappInputSelectComponent.prototype.afterInit = function (config) {
        var /** @type {?} */ self = this;
        var /** @type {?} */ groups = {};
        if (typeof this.options.length == 'number') {
            this.options.forEach(function (item) {
                if (item.group !== undefined) {
                    groups[item.group] = true;
                }
            });
        }
        this.setMbscOption({
            group: self.options.length <= 20 ? {
                groupWheel: Object.keys(groups).length > 5,
                header: Object.keys(groups).length > 0,
                clustered: Object.keys(groups).length > 2
            } : null,
            filter: self.options.length > 20,
            display: 'center',
            data: self.options,
            select: self.model.getMetadataValue(self.property, 'arrayMaxSize') ? self.model.getMetadataValue(self.property, 'arrayMaxSize') : (self.model.isArray(self.property) ? 'multiple' : 'single')
        });
    };
    return AppsappInputSelectComponent;
}(AppsappInputAbstractComponent));
AppsappInputSelectComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input-select',
                template: "\n        <mbsc-form #mbscInstanceForm=\"mobiscroll\">\n            <mbsc-input mbsc-select [error]=\"validator | async\" #mbscInstance=\"mobiscroll\"\n                        [ngModel]=\"_ngModelGettter | async\" (ngModelChange)=\"modelChanges($event)\">{{_label}}\n            </mbsc-input>\n        </mbsc-form>\n    "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputSelectComponent.ctorParameters = function () { return []; };
AppsappInputSelectComponent.propDecorators = {
    'options': [{ type: core.Output },],
};

var __extends$18 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputSelectComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputListComponent = (function (_super) {
    __extends$18(AppsappInputListComponent, _super);
    function AppsappInputListComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.options = [];
        _this.parentPropertyMetadata = null;
        _this.parentProperty = null;
        return _this;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    AppsappInputListComponent.prototype.afterInit = function (config) {
        this.parentPropertyMetadata = this.model.getMetadata(this.property);
        this.parentProperty = this.property;
        this.updateConfig();
    };
    /**
     * @return {?}
     */
    AppsappInputListComponent.prototype.reCalculateAfterSorting = function () {
        var /** @type {?} */ self = this;
        if (self.mbsc && self.mbsc.element !== undefined && self.mbsc.element) {
            var /** @type {?} */ valueAsObject_1 = {};
            var /** @type {?} */ valueSorted = [];
            var /** @type {?} */ value = self.model.getPropertyValue(self.property, true);
            if (typeof value !== 'object' && value.length == undefined) {
                value = [];
            }
            value.forEach(function (item) {
                valueAsObject_1[item.__uuid] = item;
            });
            for (var /** @type {?} */ i = 0; i < self.mbsc.element.children.length; i++) {
                if (self.mbsc.element.children.item(i)) {
                    valueSorted.push(valueAsObject_1[self.mbsc.element.children.item(i).getAttribute('data-id')]);
                }
            }
            if (valueSorted.length) {
                self.model.update(self.property, valueSorted).setProperty(self.property, valueSorted);
                if (self.model.getParent()) {
                    self.model.getParent().setProperty(self.property, self.model.getPropertyValue(self.property, true));
                }
            }
        }
    };
    /**
     * @return {?}
     */
    AppsappInputListComponent.prototype.updateConfig = function () {
        var _this = this;
        var /** @type {?} */ self = this, /** @type {?} */ value = this.model.getPropertyValue(this.property, true);
        if (typeof value !== 'object' && value.length == undefined) {
            value = [];
        }
        this.setMbscOption({
            onSortUpdate: function (event, inst) {
                self.reCalculateAfterSorting();
            },
            sortable: { handle: 'right' }, striped: false, stages: [{
                    percent: -10,
                    color: 'red',
                    icon: 'remove',
                    text: this.model.getMessage('delete'),
                    confirm: false,
                    disabled: !this.model.getMetadataValue(this.property, 'arrayMinSize') || this.model.getMetadataValue(this.property, 'arrayMinSize') < value.length ? false : true,
                    action: function (event, inst) {
                        _this.removeItem(event.index);
                        return false;
                    }
                },
                {
                    percent: 10,
                    color: 'green',
                    icon: 'plus',
                    text: this.model.getMessage('add'),
                    undo: false,
                    disabled: !this.model.getMetadataValue(this.property, 'arrayMaxSize') || this.model.getMetadataValue(this.property, 'arrayMaxSize') > value.length ? false : true,
                    action: function (event, inst) {
                        _this.addItem();
                    }
                }]
        });
    };
    /**
     * @return {?}
     */
    AppsappInputListComponent.prototype.ngAfterContentInit = function () {
        if (this.model.getMetadataValue(this.property, 'arrayMinSize')) {
            for (var /** @type {?} */ i = this.model.getPropertyValue(this.property, true).length; i < this.model.getMetadataValue(this.property, 'arrayMinSize'); i++) {
                this.addItem();
            }
        }
    };
    /**
     * remove by uuid or index
     * @param {?} uuidOrIndex
     * @return {?}
     */
    AppsappInputListComponent.prototype.removeItem = function (uuidOrIndex) {
        var /** @type {?} */ value = this.model.getPropertyValue(this.property, true);
        if (typeof value !== 'object' && value.length == undefined) {
            value = [];
        }
        if (!this.model.getMetadataValue(this.property, 'arrayMinSize') || this.model.getMetadataValue(this.property, 'arrayMinSize') < value.length) {
            var /** @type {?} */ index_1 = 0;
            var /** @type {?} */ wasdeleted_1 = false;
            value.forEach(function (item) {
                if (!wasdeleted_1 && (item.getUuid() == uuidOrIndex || uuidOrIndex == index_1)) {
                    value.splice(index_1, 1);
                    wasdeleted_1 = true;
                }
                index_1++;
            });
        }
        this.model.setProperty(this.property, this.model.getPropertyValue(this.property, true));
        this.updateConfig();
    };
    /**
     * @return {?}
     */
    AppsappInputListComponent.prototype.addItem = function () {
        var /** @type {?} */ self = this, /** @type {?} */ model = this.model.getMetadataValue(this.property, 'isList'), /** @type {?} */ item = null;
        try {
            item = this.model.getAppsAppModuleProvider() ? this.model.getAppsAppModuleProvider().new(model) : new model();
        }
        catch (e) {
            item = new model.constructor();
        }
        var /** @type {?} */ value = this.model.getPropertyValue(this.property, true);
        if (typeof value !== 'object' && value.length == undefined) {
            value = [];
        }
        if (item instanceof appsappCli.PersistableModel) {
            item.setParent(this.model);
            item.loaded().then(function (m) {
                item.getChangesObserverable().subscribe(function (next) {
                    if (next.model.getParent()) {
                        next.model.getParent().setProperty(self.property, self.model.getPropertyValue(self.property, true));
                    }
                });
            });
        }
        if (!this.model.getMetadataValue(this.property, 'arrayMaxSize') || this.model.getMetadataValue(this.property, 'arrayMaxSize') > value.length) {
            if (Object.keys(item).length == 0 || item instanceof appsappCli.PersistableModel == false) {
                item = new appsappCli.PersistableModel();
                item.importDynamicProperties(model);
            }
            item.setUuid();
            value.push(item);
        }
        this.model.setProperty(this.property, this.model.getPropertyValue(this.property, true));
        this.updateConfig();
    };
    return AppsappInputListComponent;
}(AppsappInputAbstractComponent));
AppsappInputListComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input-list',
                template: "\n\n        <mbsc-listview #mbscInstance=\"mobiscroll\">\n            <mbsc-listview-item *ngFor=\"let item of _ngModelGettter | async\" [id]=\"item.__uuid\">\n                <appsapp-input [model]=\"item\" [parentPropertyMetadata]=\"parentPropertyMetadata\" [parentProperty]=\"parentProperty\"></appsapp-input>\n            </mbsc-listview-item>\n        </mbsc-listview>\n\n    "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputListComponent.ctorParameters = function () { return []; };
AppsappInputListComponent.propDecorators = {
    'options': [{ type: core.Output },],
    'parentPropertyMetadata': [{ type: core.Output },],
    'parentProperty': [{ type: core.Output },],
};

var __extends$19 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Generated class for the AppsappInputNumberComponent component.
 *
 * See https://angular.io/api/core/Component for more info on Angular
 * Components.
 */
var AppsappInputNumberPlainComponent = (function (_super) {
    __extends$19(AppsappInputNumberPlainComponent, _super);
    function AppsappInputNumberPlainComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.precision = 0;
        _this.isInt = false;
        _this.max = null;
        _this.lastvalue = null;
        return _this;
    }
    /**
     *
     * @param {?} config
     * @return {?}
     */
    AppsappInputNumberPlainComponent.prototype.afterInit = function (config) {
        if (this.model.getMetadata(this.property, 'isPrecision').length) {
            this.precision = this.model.getMetadataValue(this.property, 'isPrecision');
        }
        if (this.model.getMetadata(this.property, 'isInt').length) {
            this.isInt = true;
        }
        if (this.model.getMetadata(this.property, 'max').length) {
            this.max = this.model.getMetadataValue(this.property, 'max');
        }
    };
    /**
     *
     * @param {?} model
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    AppsappInputNumberPlainComponent.prototype.beforeModelChanges = function (model, property, value) {
        var /** @type {?} */ changed = false;
        if (this.isInt) {
            var /** @type {?} */ v = parseInt(value);
            if (v && v !== NaN && typeof v == 'number') {
                value = v;
            }
            else {
                value = null;
            }
            changed = true;
        }
        if (this.max !== null && value > this.max) {
            value = this.lastvalue;
            changed = true;
        }
        if (this.precision) {
            var /** @type {?} */ v = parseFloat(value);
            var /** @type {?} */ c = v.toFixed(this.precision);
            if (c.toString().length < v.toString().length) {
                changed = true;
                value = c;
            }
        }
        this.lastvalue = value;
        if (changed) {
            this.update(value);
            return false;
        }
        else {
            return true;
        }
    };
    return AppsappInputNumberPlainComponent;
}(AppsappInputAbstractComponent));
AppsappInputNumberPlainComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'appsapp-input-number-plain',
                template: "\n      <mbsc-form #mbscInstanceForm=\"mobiscroll\">\n        <mbsc-input [error]=\"validator | async\" [ngModel]=\"_ngModelGettter | async\" type=\"number\" (ngModelChange)=\"modelChanges($event)\">{{_label}}</mbsc-input>\n      </mbsc-form>\n    "
            },] },
];
/**
 * @nocollapse
 */
AppsappInputNumberPlainComponent.ctorParameters = function () { return []; };

var AppsappModule = (function () {
    function AppsappModule() {
    }
    /**
     * @param {?} config
     * @param {?} messages
     * @return {?}
     */
    AppsappModule.initializeApp = function (config, messages) {
        return {
            ngModule: AppsappModule,
            providers: [AppsappModuleProvider, { provide: 'config', useValue: config }, {
                    provide: 'messages',
                    useValue: messages
                }]
        };
    };
    return AppsappModule;
}());
AppsappModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [
                    // declare all components that your module uses
                    AppsappInputComponent,
                    AppsappInputUrlComponent,
                    AppsappInputNumberComponent,
                    AppsappInputTextareaComponent,
                    AppsappInputTelComponent,
                    AppsappInputEmailComponent,
                    AppsappInputDatesComponent,
                    AppsappInputDateComponent,
                    AppsappInputPasswordComponent,
                    AppsappInputIntegerComponent,
                    AppsappInputBooleanComponent,
                    AppsappInputBirthdayComponent,
                    AppsappInputTextComponent,
                    AppsappInputAbstractComponent,
                    AppsappInputSelectComponent,
                    AppsappInputListComponent,
                    AppsappInputNumberPlainComponent
                ],
                providers: [AppsappModuleProvider, http.HttpClient],
                imports: [angular.MbscModule, common.CommonModule, forms.FormsModule, http.HttpClientModule],
                exports: [
                    // export the component(s) that you want others to be able to use
                    AppsappInputComponent
                ],
                entryComponents: [
                    AppsappInputIntegerComponent
                ]
            },] },
];
/**
 * @nocollapse
 */
AppsappModule.ctorParameters = function () { return []; };

exports.AppsappModule = AppsappModule;
exports.AppsappModuleProvider = AppsappModuleProvider;
exports.PersistableModel = appsappCli.PersistableModel;
exports.HasConditions = appsappCli.HasConditions;
exports.HasDescription = appsappCli.HasDescription;
exports.HasLabel = appsappCli.HasLabel;
exports.HasPrecision = appsappCli.HasPrecision;
exports.IsBirthDate = appsappCli.IsBirthDate;
exports.IsCalendar = appsappCli.IsCalendar;
exports.IsDateRange = appsappCli.IsDateRange;
exports.IsPassword = appsappCli.IsPassword;
exports.IsPhoneNumber = appsappCli.IsPhoneNumber;
exports.IsRating = appsappCli.IsRating;
exports.IsText = appsappCli.IsText;
exports.IsNumpad = appsappCli.IsNumpad;
exports.IsSelect = appsappCli.IsSelect;
exports.IsList = appsappCli.IsList;
exports.ValidatorConstraint = appsappCli.ValidatorConstraint;
exports.Validate = appsappCli.Validate;
exports.ValidateNested = appsappCli.ValidateNested;
exports.ValidateIf = appsappCli.ValidateIf;
exports.IsDefined = appsappCli.IsDefined;
exports.Equals = appsappCli.Equals;
exports.NotEquals = appsappCli.NotEquals;
exports.IsEmpty = appsappCli.IsEmpty;
exports.IsNotEmpty = appsappCli.IsNotEmpty;
exports.IsIn = appsappCli.IsIn;
exports.IsNotIn = appsappCli.IsNotIn;
exports.IsOptional = appsappCli.IsOptional;
exports.IsBoolean = appsappCli.IsBoolean;
exports.IsDate = appsappCli.IsDate;
exports.IsNumber = appsappCli.IsNumber;
exports.IsInt = appsappCli.IsInt;
exports.IsString = appsappCli.IsString;
exports.IsDateString = appsappCli.IsDateString;
exports.IsArray = appsappCli.IsArray;
exports.IsEnum = appsappCli.IsEnum;
exports.IsDivisibleBy = appsappCli.IsDivisibleBy;
exports.IsPositive = appsappCli.IsPositive;
exports.IsNegative = appsappCli.IsNegative;
exports.Min = appsappCli.Min;
exports.Max = appsappCli.Max;
exports.MinDate = appsappCli.MinDate;
exports.MaxDate = appsappCli.MaxDate;
exports.IsBooleanString = appsappCli.IsBooleanString;
exports.IsNumberString = appsappCli.IsNumberString;
exports.Contains = appsappCli.Contains;
exports.NotContains = appsappCli.NotContains;
exports.IsAlpha = appsappCli.IsAlpha;
exports.IsAlphanumeric = appsappCli.IsAlphanumeric;
exports.IsAscii = appsappCli.IsAscii;
exports.IsBase64 = appsappCli.IsBase64;
exports.IsByteLength = appsappCli.IsByteLength;
exports.IsCreditCard = appsappCli.IsCreditCard;
exports.IsCurrency = appsappCli.IsCurrency;
exports.IsEmail = appsappCli.IsEmail;
exports.IsFQDN = appsappCli.IsFQDN;
exports.IsFullWidth = appsappCli.IsFullWidth;
exports.IsHalfWidth = appsappCli.IsHalfWidth;
exports.IsVariableWidth = appsappCli.IsVariableWidth;
exports.IsHexColor = appsappCli.IsHexColor;
exports.IsHexadecimal = appsappCli.IsHexadecimal;
exports.IsIP = appsappCli.IsIP;
exports.IsISBN = appsappCli.IsISBN;
exports.IsISIN = appsappCli.IsISIN;
exports.IsISO8601 = appsappCli.IsISO8601;
exports.IsJSON = appsappCli.IsJSON;
exports.IsLowercase = appsappCli.IsLowercase;
exports.IsMobilePhone = appsappCli.IsMobilePhone;
exports.IsMongoId = appsappCli.IsMongoId;
exports.IsMultibyte = appsappCli.IsMultibyte;
exports.IsSurrogatePair = appsappCli.IsSurrogatePair;
exports.IsUrl = appsappCli.IsUrl;
exports.IsUUID = appsappCli.IsUUID;
exports.IsUppercase = appsappCli.IsUppercase;
exports.Length = appsappCli.Length;
exports.MinLength = appsappCli.MinLength;
exports.MaxLength = appsappCli.MaxLength;
exports.Matches = appsappCli.Matches;
exports.IsMilitaryTime = appsappCli.IsMilitaryTime;
exports.ArrayContains = appsappCli.ArrayContains;
exports.ArrayNotContains = appsappCli.ArrayNotContains;
exports.ArrayNotEmpty = appsappCli.ArrayNotEmpty;
exports.ArrayMinSize = appsappCli.ArrayMinSize;
exports.ArrayMaxSize = appsappCli.ArrayMaxSize;
exports.ArrayUnique = appsappCli.ArrayUnique;

Object.defineProperty(exports, '__esModule', { value: true });

})));
